@import "account.djinni"
@import "block.djinni"
@import "currency.djinni"
@import "dynamic.djinni"
@import "error.djinni"
@import "logger.djinni"
@import "preferences.djinni"
@import "thread_dispatcher.djinni"

# Class representing a wallet.
Wallet = interface +c {
    # Get name of wallet.
    # @return string
    getName(): string;

    # Get account with specific index.
    # @param index, 32-bit integer, index of account in wallet
    # @param callback, Callback returning, if getAccount succeed, an Account object with given index
    getAccount(index: i32, callback: callback2<optional<Account>>);

    # Get number of accounts instanciated under wallet.
    # @param callback, Callback returning, if getAccountCount succeed, a 32-bit integer representing number of accounts
    getAccountCount(callback: callback2<optional<i32>>);

    # Get list of accounts instanciated under wallet in a given range.
    # @param offset, 32-bit integer from which we retrieve accounts
    # @param count, 32-bit integer, number of accounts to retrieve
    # @param callback, ListCallback returning, if getAccounts succeed, list of Accounts object
    getAccounts(offset: i32, count: i32, callback: callback2<optional<list<Account>>>);

    # Get index of next account to create.
    # @return callback, Callback returning a 32-bit integer
    getNextAccountIndex(callback: callback2<optional<i32>>);

    # Return event bus through which wallet synchronizes it's accounts and interact with blockchain.
    # @return EventBus object
    getEventBus(): EventBus;

    # Return synchronization status wallet, true if at least one of accounts is synchronizing.
    # @return bool
    isSynchronizing(): bool;

    # Start synchronization of all accounts under wallet.
    # @return EventBus object through which wallet get notified of account's synchronization status
    synchronize(): EventBus;

    # Get wallet preferences.
    # @return Preferences object
    getPreferences(): Preferences;

    # Return account's logger which provides all needed (e.g. database) logs.
    # @return Logger Object
    getLogger(): Logger;

    # Get preferences of specific account.
    # @param index, 32-bit integer, account's index
    # @return Preferences object
    getAccountPreferences(index: i32): Preferences;

    # Get currency of wallet.
    # @return Currency object
    getCurrency(): Currency;

    # Get last block of blockchain the wallet operates on.
    # @param callback, Callback returning a Block object
    getLastBlock(callback: callback2<optional<Block>>);

    # Return infos about the creation of specific account.
    # @param accountIndex, 32-bit account, index of account in wallet
    # @param callback, Callback returning an AccountCreationInfo
    getAccountCreationInfo(
        accountIndex: i32,
        callback: callback2<optional<AccountCreationInfo>>
    );

    #TODO
    getExtendedKeyAccountCreationInfo(
        accountIndex: i32,
        callback: callback2<optional<ExtendedKeyAccountCreationInfo>>
    );

    # Return infos about the next created account.
    # @param callback, Callback returning an AccountCreationInfo
    getNextAccountCreationInfo(
        callback: callback2<optional<AccountCreationInfo>>
    );

    #TODO
    getNextExtendedKeyAccountCreationInfo(
        callback: callback2<optional<ExtendedKeyAccountCreationInfo>>
    );

    # Get account from given account creation infos.
    # @param accountCreationInfo, AccountCreationInfo object
    # @param callback, Callback returning an Account object with given creation infos
    newAccountWithInfo(
        accountCreationInfo: AccountCreationInfo,
        callback: callback2<optional<Account>>
    );

    #TODO
    newAccountWithExtendedKeyInfo(
        extendedKeyAccountCreationInfo: ExtendedKeyAccountCreationInfo,
        callback: callback2<optional<Account>>
    );

    # Erase data (in user's DB) relative to wallet since given date.
    # @param date, start date of data deletion
    eraseDataSince(
        date: date,
        callback: callback2<optional<ErrorCode>>
    );

    # Return wallet's configuration
    getConfiguration(): DynamicObject;
}
